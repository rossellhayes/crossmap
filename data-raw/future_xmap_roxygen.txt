#' Map over each combination of list elements simultaneously via futures
#'
#' These functions work exactly the same as [xmap()] functions,
#' but allow you to run the map in parallel using [future::future()]
#'
#' @inheritParams xmap
#' @inheritParams furrr::future_map
#'
#' @return An atomic vector, list, or data frame, depending on the suffix.
#'   Atomic vectors and lists will be named if the first element of .l is named.
#'
#'   If all input is length 0, the output will be length 0.
#'   If any input is length 1, it will be recycled to the length of the longest.
#'
#' @seealso [xmap()] to run functions without parallel processing.
#'
#'   [future_xmap_vec()] to automatically determine output type.
#'
#'   [future_xmap_mat()] and [future_xmap_arr()] to return results in a matrix
#'   or array.
#'
#'   [furrr::future_map()], [furrr::future_map2()], and [furrr::future_pmap()]
#'   for other parallelized mapping functions.
#'
#' @export
#'
#' @example examples/future_xmap.R
